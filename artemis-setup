#!/bin/bash
# Title: artemis-setup
# Description: Installation script for Artemis Network Traffic Virus Monitor
# Version: 1.00
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# Author: Andrew Withers (atw31337@gmail.com)

VERSION=1.00

usage ()
{
cat <<EOF

Artemis NVM Installer
Usage: $0 [OPTION] <FILE>

        Options:

                -h              This message
                -f <file>       Install using answer file <file>
                -u              Uninstall Artemis

EOF
}

genConf ()
{
        # Ensure that the directory variables end with "/"
        if [[ -n $IDIR ]]; then
                if [[ $(echo -n "$IDIR" | tail -c -1) != "/" ]]; then
                        IDIR+="/"
                fi
        fi

cat << EOF
###############################################################
#     Artemis Network Virus Monitor configuration file        #
###############################################################

# Do not modify version data
VERSION=$VERSION

# Maximum number of concurrent scan processes
MAXPROC=$MAXPROC

# Maximum number of hashes to store in the hash cache file
MAXHASH=$MAXHASH

# Infected files directory path. Files that are determined to be infected are moved to this directory.
IDIR=$IDIR

# Recipient email address(es) for malware alerts. Multiple addresses should be separated with commas.
EMAIL=$EMAIL

# Source directory. Directory to be monitored by Artemis. All files added to this directory will be inspected by Artemis.
SDIR=/opt/artemis/extracted/

# Number of days worth of log data that will be maintained.
LOGSDATA=$LOGSDATA

# Sensor nodes:
EOF
	for i in "${SENSORS[@]}"; do
		echo "SENSOR=$i"
	done
}


## Main

# Got r00t?
if [[ $(id -u) -ne 0 ]]; then
        echo "This script requires root privilege. Try using sudo"
        exit
fi

MODE=0 # 0 is Interactive Mode and 1 is Automated Mode
CLEAN=0 # Determines whether or not mlocate needs to be removed after installation

while getopts ":huf:" OPT; do
        case $OPT in
        h)
                usage
                exit 0
                ;;
        f)
                MODE=1
                AFILE="$OPTARG" # Specifies the configuration file to be used in Automated Mode
                if ! [[ -f $AFILE ]]; then
                        echo "$AFILE does not exist!"
                        exit 1
                fi
                ;;
        u)
                uninstall
                exit 0
                ;;
        \?)
                echo "Invalid option: -$OPTARG"
                usage
                exit 1
                ;;
        :)
                echo "Option -$OPTARG requires an argument."
                usage
                exit 1
                ;;
        esac
done

# Check for previous version
if [[ -e /opt/artemis/artemis-setup ]]; then
        # Verify that the old setup script version corresponds to the version of Artemis that is currently installed and that
        # it is less than the version that is about to be installed
        if [[ $(grep Version /opt/artemis/artemis-setup | head -n1 | cut -d' ' -f3) == $(grep VERSION /etc/artemis.conf | cut -d'=' -f2) ]] && \
        (( $(echo "$(grep VERSION /etc/artemis.conf | cut -d'=' -f2) < $VERSION" | bc -l) )); then
                echo "A previous version of Artemis has been detected."
                echo "Would you like to remove it prior to proceeding with the installation?"
                echo "Note: Prompts will allow you to choose which components should be removed."
                read -p "[Y/n]: " SELECTION
                if [[ $SELECTION == "y" ]] || [[ $SELECTION == "Y" ]] || [[ $SELECTION == "" ]]; then
                        /opt/artemis/artemis-setup -u
                fi
        elif [[ $(grep VERSION /etc/artemis.conf | cut -d'=' -f2) == "$VERSION" ]]; then
                read -p "This version of Artemis is already installed. Would you like to reinstall? [y/N]: " SELECTION
                if  [[ $SELECTION != "y" ]] && [[ $SELECTION != "Y" ]]; then
                        exit 0
                fi
        else
                read -p "A newer version of Artemis is already installed. Would you like to remove it and install this version? [y/N]: " SELECTION
                if  [[ $SELECTION == "y" ]] || [[ $SELECTION == "Y" ]]; then
                        /opt/artemis/artemis-setup -u
                else
                        exit 0
                fi
        fi
fi

# If non-interactive mode is selected, verify the integrity of the answer file and retrieve config variables.
if [[ $MODE -eq 1 ]];then
        if grep -q MYDOMAIN= "$AFILE" && grep -q RELAYHOST= "$AFILE" && grep -q MAXPROC= "$AFILE" && grep -q MAXHASH= "$AFILE" \
        && grep -q IDIR= "$AFILE" && grep -q EMAIL= "$AFILE" && grep -q SDIR= "$AFILE" && grep -q LOGSDATA= "$AFILE" && grep -q SENSOR= "$AFILE"; then
                MYDOMAIN=$(grep MYDOMAIN "$AFILE" | cut -d'=' -f2)
                RELAYHOST=$(grep RELAYHOST "$AFILE" | cut -d'=' -f2)
                MAXPROC=$(grep MAXPROC "$AFILE" | cut -d'=' -f2)
                MAXHASH=$(grep MAXHASH "$AFILE" | cut -d'=' -f2)
                IDIR=$(grep IDIR "$AFILE" | cut -d'=' -f2)
                EMAIL=$(grep EMAIL "$AFILE" | cut -d'=' -f2)
                SDIR=$(grep SDIR "$AFILE" | cut -d'=' -f2)
                LOGSDATA=$(grep LOGSDATA "$AFILE" | cut -d'=' -f2)
		SENSORS=($(grep SENSOR= "$AFILE" | cut -d'=' -f2))
		# Convert all sensor FQDNs to lowercase
		SENSORS=( "${SENSORS[@],,}" )
        else
                echo "Answer file integrity check failed"
                echo "Aborting installation"
                exit 1
        fi
else	# If Interactive Mode is selected then acquire artemis.conf settings from the user
	while ! [[ $MAXPROC =~ ^[1-9]+$ ]]; do
                read -p 'Artemis: Enter the concurrent scan suppression threshold [4]: ' MAXPROC
                if [[ -z $MAXPROC ]]; then
                        MAXPROC=4
                fi
                if ! [[ $MAXPROC =~ ^[1-9]+$ ]]; then
                        echo "Invalid response. Try again."
                fi
        done
        while ! [[ $MAXHASH =~ ^[0-9]+$ ]]; do
                read -p 'Artemis: Indicate the maximum number of hashes to store in the hash cache [1000]: ' MAXHASH
                if [[ -z $MAXHASH ]]; then
                        MAXHASH=1000
                fi
                if ! [[ $MAXHASH =~ ^[0-9]+$ ]]; then
                        echo "Invalid response. Try again."
                fi
        done
        while ! [[ $LOGSDATA =~ ^[0-9]+$ ]] || [[ $LOGSDATA -gt 365 ]]; do
                read -p 'Artemis: How many days worth of log data should be maintained? (0-365) [14]: ' LOGSDATA
                if  [[ -z $LOGSDATA ]]; then
                        LOGSDATA=14
                fi
                if  ! [[ $LOGSDATA =~ ^[0-9]+$ ]] || [[ $LOGSDATA -gt 365 ]]; then
                        echo "Invalid response. Try again."
                fi
	done
        read -p 'Artemis: Where would you like the infected files to be stored? Leave blank if you do not want infected files to be moved: ' IDIR
        read -p 'Artemis: Enter recipient email address(es) for malware alerts. Multiple addresses should be comma separated: ' EMAIL
        if [[ -z $EMAIL ]]; then
                EMAIL=root@localhost
        fi
	while ! [[ NUM_NODES =~ ^[1-9]+$ ]]; do
		read -p 'Indicate the number of sensor nodes that will be utilized: ' NUM_NODES
		if  ! [[ $NUM_NODES =~ ^[1-9]+$ ]]; then
			echo "Invalid response. Try again."
		fi
	done
	while [[ "$VERIFY" != 'y' ]]; do
		printf 'Please enter the FQDN of each sensor:\n'
		for (( i=1; i<=$NUM_NODES; i++ )); do
	 		while ( -z "$NODE" ); do
				read -p "$i): " "NODE"
				if [[ -z "$NODE" ]]; then
					printf 'Invalid FQDN. Try again.\n'
				fi
			done
			NODE=${NODE,,}
			SENSORS+=("$NODE")
		done
		printf 'Sensor Nodes:\n'
		for i in "${SENSORS[@]}"; do
			printf '%s\n' "$i"
		done
		while [[ "$VERIFY" != 'y' ]] && [[ "$VERIFY" != 'n' ]]; do
			read -p 'Is this correct? [y/n]: ' VERIFY
			VERIFY=${VERIFY,,}
			if [[ "$VERIFY" != 'y' ]] && [[ "$VERIFY" != 'n' ]]; then
				echo "Invalid response. Try again."
			fi
		done
		if [[ "$VERIFY" == 'n' ]]; then
			unset SENSORS
			echo  "OK, try again."
		fi
	done

fi

printf "Installing scanner node: %s\n" "$HOSTNAME"

# Check for a running instanace of Artemis
if [[ -n $(pgrep -x artemis) ]]; then
        echo "Shutting down Artemis..."
        service artemis stop
fi

#Install prerequisite packages if necessary
echo "Checking prerequisites..."
apt-get update -qq

if ! dpkg --get-selections | grep -v deinstall | grep -wq bc; then
        echo "Installing bc..."
        apt-get -y install bc > /dev/null 2>&1
fi
if ! dpkg --get-selections | grep -v deinstall | grep -q postfix; then
        if [[ $MODE -eq 0 ]]; then
                while [[ -z $MYDOMAIN ]]; do
                        read -p 'Postfix: Enter your domain name? (ex: example.com): ' MYDOMAIN
                        if [[ -z $MYDOMAIN ]]; then
                                echo "Postfix: A domain name is required."
                        fi
                done
                read -p 'Postfix: Enter your relay host? (ex: smtp.example.com) Leave blank for none: ' RELAYHOST
        fi
        echo "Installing postfix..."
        debconf-set-selections <<< "postfix postfix/mailname string $MYDOMAIN"
        debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
        apt-get -y install postfix > /dev/null 2>&1
        echo "$MYDOMAIN" > /etc/mailname
        cp ./conf/main.cf /etc/postfix/main.cf
        sed -i "31s/.*/myhostname = $HOSTNAME.$(cat /etc/mailname)/" /etc/postfix/main.cf
        sed -i "34s/.*/mydestination = $HOSTNAME, localhost.localdomain, localhost, $HOSTNAME.$(cat /etc/mailname)/" /etc/postfix/main.cf
        sed -i "35s/.*/relayhost = $RELAYHOST/" /etc/postfix/main.cf
        cp ./conf/hosts /etc/hosts
        sed -i "2s/.*/127.0.1.1       $(cat /etc/mailname) $HOSTNAME/" /etc/hosts
        postfix reload > /dev/null 2>&1
fi
if ! dpkg --get-selections | grep -v deinstall | grep -q inotify-tools; then
        echo "Installing inotify-tools..."
        apt-get -y install inotify-tools > /dev/null 2>&1
fi
if ! dpkg --get-selections | grep -v deinstall | awk '{print $1}' | grep -xq clamav; then
        echo "Installing clamav..."
        apt-get -y install clamav > /dev/null 2>&1
        echo "Fetching a fresh clam..."
        freshclam > /dev/null 2>&1
fi
if ! dpkg --get-selections | grep -v deinstall | awk '{print $1}' | grep -xq mysql-server; then
        echo "Installing mysql-server..."
        echo "debconf debconf/frontend select noninteractive" | sudo debconf-set-selections
        echo "mysql-server mysql-server/root_password password" | sudo debconf-set-selections
        echo "mysql-server mysql-server/root_password_again password" | sudo debconf-set-selections
        apt-get -y install mysql-server > /dev/null 2>&1
        # Set a random password for the mysql root account
        mysqladmin -u root -p'password' password "$(date +%s%N | sha256sum | base64 | head -c 32)" > /dev/null 2>&1
fi
if ! dpkg --get-selections | grep -v deinstall | awk '{print $1}' | grep -qx syslog-ng; then
	echo "Installing syslog-ng..."
	apt-get -y install syslog-ng-core > /dev/null 2>&1
fi

# Configure syslog-ng to receive syslogs from remote hosts
ufw allow from any to any port 514 proto udp
cat <<EOF >> /etc/syslog-ng/syslog-ng.conf

source net { udp(); };
destination remote { file("/opt/artemis/logs/artemis-files.log"); };
log { source(net); destination(remote); };
EOF
service syslog-ng restart

# Create /etc/artemis.conf
echo "Generating /etc/artemis.conf..."
genConf > /etc/artemis.conf

# Create database
if [[ -z $( mysql --defaults-file=/etc/mysql/debian.cnf -BN -e "SHOW DATABASES LIKE 'artemis';") ]]; then
        echo "Building database..."
        mysql --defaults-file=/etc/mysql/debian.cnf -e "CREATE DATABASE artemis;"
        mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "CREATE TABLE Cache (HashID int NOT NULL AUTO_INCREMENT, Hash char(64) NOT NULL, Result tinyint(1), Hits int N$
                TimeStamp bigint NOT NULL, PRIMARY KEY (HashID)) ENGINE=InnoDB;"
        mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "CREATE TABLE Logs (EntryID int NOT NULL AUTO_INCREMENT, DateTime DATETIME NOT NULL, Hash char(64) NOT NULL, \
                Scanned tinyint(1), Queued tinyint(1), Result tinyint(1), FileName varchar(255) NOT NULL, FileSize bigint NOT NULL, ScanTime float, QTime double, \
                FileType varchar(5) NOT NULL, Source varchar(255), Destination varchar(255), PRIMARY KEY (EntryID)) ENGINE=InnoDB;"
        mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "CREATE TABLE Queue (FileID int NOT NULL AUTO_INCREMENT, FileName varchar(255) NOT NULL, TimeStamp varchar(255$
                LogsID int NOT NULL, EntryTime double NOT NULL, PRIMARY KEY (FileID)) ENGINE=InnoDB;"
fi

# Copy files to appropriate locations
echo Copying files...
if ! [[ -d /opt/artemis/ ]]; then
        mkdir -p /opt/artemis/
fi
cp ./artemis-setup /opt/artemis/
cp ./scan_node/scripts/artemis /usr/bin/artemis
cp ./scan_node/scripts/artemis-logfile-cleanup /usr/bin/artemis-logfile-cleanup
cp ./scan_node/scripts/artemis-brolog-cleanup /usr/bin/artemis-brolog-cleanup
cp ./scan_node/scripts/artemis-logRepair /usr/bin/artemis-logRepair
cp ./scan_node/scripts/orion /usr/bin/orion
cp ./scan_node/scripts/arteStat /usr/bin/arteStat
cp ./scan_node/scripts/tracks /usr/bin/tracks
cp ./scan_node/scripts/artemis-logstable-cleanup /usr/bin/artemis-logstable-cleanup
cp ./scan_node/scripts/parsOpts.sh /opt/artemis/
cp ./scan_node/scripts/artemisInit /usr/sbin/artemisInit

cp ./scan_node/conf/artemis-brolog-cron /etc/cron.d/artemis-brolog-cron
cp ./scan_node/conf/artemis-logfile-cron /etc/cron.d/artemis-logfile-cron
cp ./scan_node/conf/artemis-logstable-cron /etc/cron.d/artemis-logstable-cron
cp ./scan_node/conf/artemis-logRepair-cron /etc/cron.d/artemis-logRepair-cron
cp ./scan_node/conf/artemis.service /lib/systemd/system/artemis.service

# Reload systemctl
systemctl daemon-reload > /dev/null 2>&1
systemctl enable artemis > /dev/null 2>&1

# Create whitelist file if necessary
if ! [[ -e /opt/artemis/whitelist ]]; then
        cat <<EOF > /opt/artemis/whitelist
# Artemis Hash Whitelist
# This file can be used to whitelist the SHA256 hashes of known clean files. Hashes should be whitespace separated.
EOF
fi

# Create blacklist file if necessary
if ! [[ -e /opt/artemis/blacklist ]]; then
        cat <<EOF > /opt/artemis/blacklist
# Artemis Hash Blacklist
# This file can be used to blacklist the SHA256 hashes of known infected files in order to reduce the number of scans performed
# or flag files that are not otherwise detected by ClamAV. Hashes should be whitespace separated.
EOF
fi

# Generate sensor config file
cat <<EOF > /tmp/artemis.conf
###############################################################
#     Artemis Network Virus Monitor configuration file        #
###############################################################

# Do not modify version data
VERSION=$VERSION

# Scanner node
SCANNER=$HOSTNAME.$(cat /etc/mailname)

# Source directory. Directory to be monitored by Artemis. All files added to this directory will be inspected by Artemis.
SDIR=

EOF

printf "Installation of the sensor nodes requires sudo privileges. Ensure that the user account used on each node is a member of that node's sudo group."
printf "Generating key pair..."
# Create a ssh key pair on the scanner node
ssh-keygen -t rsa -N "" -f /root/.ssh/artemis
# Create a scanner node system user for transferring files from the sensor nodes to the scanner node
adduser --system artemis > /dev/null
# Scanner node public key
PUBKEY="$(cat /root/.ssh/artemis)"
for i in "${SENSORS[@]}";do
	printf "Installing sensor node: %s\n" "$i"
	read -p "Please enter your username for $i: " USERNAME
	# Add the scanner node public key to the authorized key file on the sensor
	ssh -qt "$USERNAME"@"$i" "echo $PUBKEY >> ~/.ssh/authorized_keys"
	# Create a ssh key pair on the sensor node
	ssh -qti /root/.ssh/artemis "$USERNAME"@"$i" "sudo ssh-keygen -t rsa -N '' -f /root/.ssh/artemis" > /dev/null
	# Add the sensors public key to artemis' authroized keys file
	SENSOR_PUBKEY=$(ssh -qti /root/.ssh/artemis "$USERNAME"@"$i" "sudo cat /root/.ssh/artemis.pub")
	echo "$SENSOR_PUBKEY" >> /home/artemis/.ssh/authorized_keys
	read -p "$i: What is the source directory that should be monitored by Artemis on this node? [/nsm/bro/extracted/]: " SDIR
	if [[ -z $SDIR ]]; then
		SDIR="/nsm/bro/extracted"
	fi
	sftp -qi /root/.ssh/artemis/ "$USERNAME"@"$i" <<EOF > /dev/null
mkdir /tmp/artemis/
cd /tmp/artemis/
put ./sensor_node/conf/extract.bro
put ./sensor_node/scripts/sensor-setup
cd /usr/bin/
put ./sensor_node/scripts/artemis_forwarder
cd /etc/
put /tmp/artemis.conf
cd /lib/systemd/system/
put ./sensor_node/conf/artemis_fowarder.service
cd /usr/sbin/
put ./sensor_node/scripts/artemisFInit
EOF
	ssh -qti /root/.ssh/artemis "$USERNAME"@"$i" "sudo /tmp/artemis/sensor-setup $SDIR"

done

rm /tmp/artemis.conf
echo "Installation complete"
echo "Starting Artemis..."
service artemis start
exit

