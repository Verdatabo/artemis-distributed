#!/bin/bash
# Title: artemis
#
#
#   ________  ________  _________  _______   _____ ______   ___  ________
#  |\   __  \|\   __  \|\___   ___\\  ___ \ |\   _ \  _   \|\  \|\   ____\
#  \ \  \|\  \ \  \|\  \|___ \  \_\ \   __/|\ \  \\\__\ \  \ \  \ \  \___|_
#   \ \   __  \ \   _  _\   \ \  \ \ \  \_|/_\ \  \\|__| \  \ \  \ \_____  \
#    \ \  \ \  \ \  \\  \|   \ \  \ \ \  \_|\ \ \  \    \ \  \ \  \|____|\  \
#     \ \__\ \__\ \__\\ _\    \ \__\ \ \_______\ \__\    \ \__\ \__\____\_\  \
#      \|__|\|__|\|__|\|__|    \|__|  \|_______|\|__|     \|__|\|__|\_________\
#                                                                  \|_________|
#
#
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
#
# Author: Andrew Withers (atw127@psu.edu, atw31337@gmail.com)

CONF=/etc/artemis.conf

source /opt/artemis/parsOpts.sh

usage() {
cat <<EOF

Artemis Network Traffic Virus Monitor
Usage: artemis [OPTION]

        Options:

                -h                      This message
                -v                      Print version information
                -f <file>               Force process a file
                -p                      Purge the hash cache

EOF
}

exec 2>> /var/log/artemis.err

# Got r00t?
if [[ $(id -u) -ne 0 ]]; then
        echo "Root privilege required. Try using sudo"
        exit 0
fi

# Check that the configuration file exists
if [[ ! -f $CONF ]]; then
        echo Artemis: Configuration file does nost exist!
        exit 1
fi

# Parse options
while [[ $OPTIND -lt $# ]];do
        parsOpts "$@" "h,help,v,f:,p"
        case $OPT in
        h|help)
                usage
                exit 0
                ;;
        v)
                echo "Artemis Network Traffic Virus Monitor v$(grep VERSION /etc/artemis.conf | cut -d'=' -f2)"
                exit 0
                ;;
        f)
                mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "INSERT INTO PreQueue (FileName, TimeStamp) VALUES \
					('$OPTARG', '$(date +%Y-%m-%d) $(date +%T)');"
                exit 0
                ;;
        p)
                mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "TRUNCATE TABLE Cache;" > /dev/null
                echo "Artemis: Cache has been purged"
                exit 0
                ;;
        \?)
                usage
                exit 1
                ;;
        :)
                echo "Invalid number of arguments for option $OPTARG. $OPTARG requires $NUMARGS argument(s)."
                exit 1
                ;;
        esac
done
shift "$OPTIND"

# Get source directory from artemis.conf
DIR=$(grep SDIR "$CONF" | cut -d'=' -f2)

if [[ -z "$DIR" ]]; then
		echo "Artemis: The source directory has not been properly configured in artemis.conf"
		exit 1
fi

# Create a temporary file directory if it does not exist
! [[ -d /tmp/artemis/ ]] && mkdir -m 660 /tmp/artemis/

# Mount the cache directory
! [[ -d /opt/artemis/cache/ ]] && mkdir -p /opt/artemis/cache/

if  ! mount | grep -q /opt/artemis/cache; then
        mount -t tmpfs -o size=2m tmpfs /opt/artemis/cache/
        chmod 600 /opt/artemis/cache/
fi

# Create a worker pid directory in the cache
mkdir /opt/artemis/cache/workers/
mkdir /opt/artemis/cache/prescans/

# Truncate the PreQueue and ScanQueue tables. Ensures that the queues are emtpy at start up.
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "TRUNCATE TABLE ScanQueue;"
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "TRUNCATE TABLE PreQueue;"

# Start the Orion scanner
/usr/bin/orion & ORIONPID=$!
# Start the PreScanner
/usr/bin/preScan & PRESCANPID=$!

# Begin extraction directory monitoring
inotifywait -q -m -e create,moved_to --format '%w%f' "$DIR" | while read FILE
do
        mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "INSERT INTO PreQueue (FileName, TimeStamp) VALUES \
			('$FILE', '$(date +%Y-%m-%d) $(date +%T)');"
done

# Shutdown management processes
kill -1 $PRESCANPID
kill -1 $ORIONPID

# Wait for orion to stop
wait $PRESCANPID
wait $ORIONPID

# Cleanup
mount | grep /opt/artemis/cache && umount /opt/artemis/cache/
[[ -d /opt/artemis/cache/ ]] && rm -rf /opt/artemis/cache/
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Logs WHERE Result IS NULL;"
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Result IS NULL;"
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "TRUNCATE TABLE ScanQueue;"
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e  "TRUNCATE TABLE PreQueue;"
if [[ -d /tmp/artemis/ ]] && ! [[ -d /tmp/artemis/logRepair ]]; then
        rm -rf /tmp/artemis/
fi

exit
