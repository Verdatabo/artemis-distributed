#!/bin/bash
# Title: artemis
# Version: 1.00.00
#
#
#   ________  ________  _________  _______   _____ ______   ___  ________
#  |\   __  \|\   __  \|\___   ___\\  ___ \ |\   _ \  _   \|\  \|\   ____\
#  \ \  \|\  \ \  \|\  \|___ \  \_\ \   __/|\ \  \\\__\ \  \ \  \ \  \___|_
#   \ \   __  \ \   _  _\   \ \  \ \ \  \_|/_\ \  \\|__| \  \ \  \ \_____  \
#    \ \  \ \  \ \  \\  \|   \ \  \ \ \  \_|\ \ \  \    \ \  \ \  \|____|\  \
#     \ \__\ \__\ \__\\ _\    \ \__\ \ \_______\ \__\    \ \__\ \__\____\_\  \
#      \|__|\|__|\|__|\|__|    \|__|  \|_______|\|__|     \|__|\|__|\_________\
#                                                                  \|_________|
#
#
#
# This program is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software Foundation,
# either version 3 of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <http://www.gnu.org/licenses/>.
#
# Author: Andrew Withers (atw127@psu.edu, atw31337@gmail.com)

CONF=/etc/artemis.conf

source /opt/artemis/parsOpts.sh

usage() {
cat <<EOF

Artemis Network Traffic Virus Monitor
Usage: artemis [OPTION]

	Options:

		-h	   		This message
		-v			Print version information
		-f <file>		Force process a file
		-p	    		Purge the hash cache
		-s <Source IPv4>	Add a source IP to the whitelist
		-o <Source IPv4>	Add a source IP to the blacklist
		-w <Hash>		Add a SHA256 or MD5 hash to the whitelist
		-b <Hash>		Add a SHA256 or MD5 hash to the blacklist

EOF
}

LogsEntry() {
SIZE=$(du -b "$1" | awk '{print $1}')
# If the filename contains a . then set the last extension as the filetype; otherwise make the filetype blank
if echo "$4" | grep -q "\."; then
	FILETYPE=$(echo "$4" | rev | cut -d'.' -f1 | rev)
	if [[ ${#FILETYPE} -gt 5 ]]; then
		FILETYPE=$(echo "$FILETYPE" | head -c5)
	fi
else
	FILETYPE=""
fi
LOGSID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO Logs (DateTime, SHA256, MD5, FileName, FileSize, FileType, \
Source, Destination) VALUES ('$(date +%Y-%m-%d) $(date +%T)', '$2', '$3', '$4', $SIZE, '$FILETYPE', '$SOURCE', '$DEST'); SELECT LAST_INSERT_ID();")
}

sendAlert() {
TFILE=$(mktemp -p /tmp/artemis/)	# Temporary file for alert email output
printf "From: %s\nTo: %s\nSubject: Malware Detected!\n\n" "$HOSTNAME" "$EMAIL"  > "$TFILE"
printf "%s: %s has detected malware on the network.\n" "$TSTAMP" "$HOSTNAME" >> "$TFILE"
printf "SHA256: %s\n" "$SHA256" >> "$TFILE"
printf "MD5: %s\n" "$MD5" >> "$TFILE"
if [[ -n $IDIR ]]; then
	 printf "A copy of the infected file(s) can be located in %s\n" "$IDIR" >> "$TFILE"
fi
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName, Source, CONCAT('->') AS Arrow, Destination FROM Logs WHERE EntryID=$LOGSID;" >> "$TFILE"
if [[ -e /opt/artemis/cache/$SHA256 ]]; then
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT FileName, Source, CONCAT('->') AS Arrow, Destination FROM Logs WHERE EntryID IN ($IDLIST);" >> "$TFILE"
fi
# VirusTotal analysis
if [[ -n $VTAPI ]]; then
	# Check if an analysis already exists
	if [[ $(curl -sI https://www.virustotal.com/en/file/"$SHA256"/analysis/ | awk '/^HTTP/ {print $2}') -ne 200 ]]; then	# Analysis does not exist
		# Upload file to VirusTotal for scanning
		VTOUT=$(curl -s --request POST \
			--url 'https://www.virustotal.com/vtapi/v2/file/scan' \
			--form 'apikey='"$VTAPI" \
			--form 'file=@'"$1")
		# Check if the file was too large to be scanned via API
                if echo "$VTOUT" | grep -q "Your client issued a request that was too large."; then
                        VTLINK="The file was too large to be automatically scanned via API. Please upload the file manually."
                else
                        # Extract the scan results link from the output
                        VTLINK=$(echo -n "$VTOUT" | cut -d',' -f6 | sed 's/\( "permalink": "\|"\)//g')
                fi
	else
		# VT analysis already exists
		VTLINK="https://www.virustotal.com/en/file/$SHA256/analysis/"
	fi
else
	# VT File analysis page
	VTLINK="https://www.virustotal.com/en/file/$SHA256/analysis/"
fi
printf "VirusTotal: %s\n" "$VTLINK" >> "$TFILE"
sendmail -vt < "$TFILE"
rm -f "$TFILE"
}

file_integrity_chk() {	 # checks and, if necessary, waits for a file to finish being written to disk
local hash
while [[ $(md5sum "$1" | cut -d' ' -f1) != "$hash" ]]; do
	hash=$(md5sum "$1" | cut -d' ' -f1)
	sleep 0.1
done
}

getSrcDst() {
# Check the current log
if [[ -e /opt/artemis/logs/artemis-files.log ]]; then
	SOURCE=$(grep "$FILENAME" /opt/artemis/logs/artemis-files.log | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
	DEST=$(grep "$FILENAME" /opt/artemis/logs/artemis-files.log | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
fi

# If the Source/Destination are not located there, check the most recently archived log file
if [[ -z $SOURCE ]] || [[ -z $DEST ]] && [[ -f /opt/artemis/logs/artemis-files.log.1.gz ]]; then
	TEMPID=$(date +%s%N)
	file_integrity_chk /opt/artemis/logs/artemis-files.log.1.gz # Ensure that the file has been completely written to disk during log rotation before proceeding
	cp /opt/artemis/logs/artemis-files.log.1.gz /tmp/artemis/"$TEMPID".temp.gz
	gzip -d /tmp/artemis/"$TEMPID".temp.gz
	SOURCE=$(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
	DEST=$(grep "$FILENAME" /tmp/artemis/"$TEMPID".temp | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
	rm /tmp/artemis/"$TEMPID".temp
fi

# If the Source/Destination are not located in the archived log either, then wait for the data to be written to the current log
if [[ -z $SOURCE ]] || [[ -z $DEST ]]; then
	for (( i=0; i < 300; i++ )); do # For loop, rather than while, prevents infinite loops caused by log rotation
		local counter=0
		while ! [[ -e /opt/artemis/logs/artemis-files.log ]]; do       # Prevents missing file errors during log rotation
				sleep 0.1
				((counter++))
				if [[ $counter -ge 300 ]]; then	# Prevents an inifinite while loop
					break 2
				fi
		done
		SOURCE=$(grep "$FILENAME" /opt/artemis/logs/artemis-files.log | head -n1 | awk -F'[][]' '{print$2}' | sed 's/"//g')
		DEST=$(grep "$FILENAME" /opt/artemis/logs/artemis-files.log | head -n1 | awk -F'[][]' '{print$4}' | sed 's/"//g')
		if [[ -z $SOURCE ]] || [[ -z $DEST ]]; then
			sleep 1
		else
			break
		fi
	done
fi
}


prescan() {
TSTAMP="$(date +%Y-%m-%d) $(date +%T)"
file_integrity_chk "$1"
SHA256=$(sha256sum "$1" | cut -d' ' -f1)
MD5=$(md5sum "$1" | cut -d' ' -f1)
FILENAME=$(basename "$1")      # File name only
getSrcDst
LogsEntry "$1" "$SHA256" "$MD5" "$FILENAME"
HASHID=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT HashID FROM Cache WHERE Hash='$SHA256' LIMIT 1;")
if [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM SourceBlacklist WHERE Source='$SOURCE';") -gt 0 ]]; then
	# The source is present in the source blacklist
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=0, Queued=0, Result=6 WHERE EntryID=$LOGSID;"
	sendAlert "$1"
	if [[ -n $IDIR ]]; then
		mv "$DIR$FILENAME" "$IDIR$FILENAME"
		chmod 600 "$IDIR$FILENAME"
	fi
elif [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM SourceWhitelist WHERE Source='$SOURCE';") -gt 0 ]]; then
	# The source is presnet in the source whitelist
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=0, Queued=0, Result=5 WHERE EntryID=$LOGSID;"
elif [[ -n $HASHID ]] && [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Result FROM Cache WHERE Hash='$SHA256' LIMIT 1;") -ne 2 ]]; then
	# Hash is present in the Cache table and the result was not an error
	RESULT=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT Result FROM Cache WHERE HashID=$HASHID;")
	# Update the Logs and Cache table entries
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=0, Queued=0 WHERE EntryID=$LOGSID;"
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Cache SET Hits=Hits+1, TimeStamp=$(date +%s%N) WHERE HashID=$HASHID;"
	if [[ $RESULT == "NULL" ]]; then
		echo "$LOGSID" >> /opt/artemis/cache/"$SHA256"
	else    # Result is present in the Cache table
		## Update the result in the Logs table
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Result=$RESULT WHERE EntryID=$LOGSID;"
		if [[ $RESULT -eq 1 ]]; then
			sendAlert "$1"
			if [[ -n $IDIR ]]; then
				mv "$DIR$FILENAME" "$IDIR$FILENAME"
				chmod 600 "$IDIR$FILENAME"
			fi
		fi
	fi
elif [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM HashBlacklist WHERE MD5='$MD5';") -gt 0 ]] ||\
	[[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM HashBlacklist WHERE SHA256='$SHA256';") -gt 0 ]]; then
	# The hash is present in the hash blacklist
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=0, Queued=0, Result=4 WHERE EntryID=$LOGSID;"
	sendAlert "$1"
	if [[ -n $IDIR ]]; then
	       	mv "$DIR$FILENAME" "$IDIR$FILENAME"
	       	chmod 600 "$IDIR$FILENAME"
	fi
elif [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM HashWhitelist WHERE MD5='$MD5';") -gt 0 ]] ||\
	[[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM HashWhitelist WHERE SHA256='$SHA256';") -gt 0 ]]; then
	# The hash is present in the hash whitelist
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Scanned=0, Queued=0, Result=3 WHERE EntryID=$LOGSID;"
else	# Hash does not exist in the Whitelist, Blacklist, or Cache tables
	ENTRYTIME="$(date +%s).$(date +%N | head -c3)"
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "INSERT INTO Queue (FileName, TimeStamp, LogsID, EntryTime) VALUES ('$1', '$TSTAMP', $LOGSID, $ENTRYTIME);"
	mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "UPDATE Logs SET Queued=1 WHERE EntryID=$LOGSID;"
fi
}

exec 2> /var/log/artemis.err

# Got r00t?
if [[ $(id -u) -ne 0 ]]; then
	echo "Root privilege required. Try using sudo"
	exit 0
fi

# Check that the configuration file exists
if [[ ! -f $CONF ]]; then
	echo Artemis: Configuration file does nost exist!
	exit 1
fi

# Parse options
while [[ $OPTIND -lt $# ]];do
	parsOpts "$@" "h,help,v,f:,p,s:,o:,w:,b:"
	case $OPT in
	h|help)
		usage
		exit 0
		;;
	v)
		echo "Artemis Network Traffic Virus Monitor v$(grep VERSION /etc/artemis.conf | cut -d'=' -f2)"
		exit 0
		;;
	f)
		prescan "$OPTARG" &
		exit 0
		;;
	p)
		mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "TRUNCATE TABLE Cache;" > /dev/null
		echo "Artemis: Cache has been purged"
		exit 0
		;;
	s)
		if [[ $(echo -n "$OPTARG" | wc -c) -le 15 ]]; then
			if [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM SourceWhitelist WHERE Source='$OPTARG';") -eq 0 ]]; then
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "INSERT INTO SourceWhitelist (Source) VALUES ('$OPTARG');"
				echo "$OPTARG has been added to the whitelist"
			else
				echo "$OPTARG already exists in the whitelist"
			fi
			exit 0
		else
			echo "Invalid IPv4 address"
			exit 1
		fi
		;;
	o)
		if [[ $(echo -n  "$OPTARG" | wc -c) -le 15 ]]; then
			if [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM SourceBlacklist WHERE Source='$OPTARG';") -eq 0 ]]; then
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "INSERT INTO SourceBlacklist (Source) VALUES ('$OPTARG');"
				echo "$OPTARG has been added to the blacklist"
			else
				echo "$OPTARG already exists in the blacklist"
			fi
			exit 0
		else
			echo "Invalid IPv4 address"
			exit 1
		fi
		;;
	w)
		if [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM HashWhitelist WHERE MD5='$OPTARG' OR SHA256='$OPTARG';") -eq 0 ]]; then
			if [[ $(echo -n "$OPTARG" | wc -c) -eq 32 ]]; then 	# MD5
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO HashWhitelist (MD5) VALUES ('$OPTARG');"
				SHA256=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT SHA256 FROM Logs WHERE MD5='$OPTARG' LIMIT 1;")
				if [[ -n $SHA256 ]]; then
					mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Hash='$SHA256';"
				fi
				echo "$OPTARG has been added to the whitelist"
				exit 0
			elif [[ $(echo -n "$OPTARG" | wc -c) -eq 64 ]]; then # SHA256
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO HashWhitelist (SHA256) VALUES ('$OPTARG');"
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Hash='$OPTARG';"
				echo "$OPTARG has been added to the whitelist"
				exit 0
			else
				echo "Invalid hash value"
				exit 1
			fi
		else
			echo "$OPTARG already exists in the whitelist"
			exit 1
		fi
		;;
	b)
		if [[ $(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT COUNT(*) FROM HashBlacklist WHERE MD5='$OPTARG' OR SHA256='$OPTARG';") -eq 0 ]]; then
			if [[ $(echo -n "$OPTARG" | wc -c) -eq 32 ]]; then	# MD5
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO HashBlacklist (MD5) VALUES ('$OPTARG');"
				SHA256=$(mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "SELECT SHA256 FROM Logs WHERE MD5='$OPTARG' LIMIT 1;")
				if [[ -n $SHA256 ]]; then
					mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Hash='$SHA256';"
				fi
				echo "$OPTARG has been added to the blacklist"
				exit 0
			elif [[ $(echo -n "$OPTARG" | wc -c) -eq 64 ]]; then # SHA256
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -BN -e "INSERT INTO HashBlacklist (SHA256) VALUES ('$OPTARG');"
				mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Hash='$OPTARG';"
				echo "$OPTARG has been added to the blacklist"
				exit 0
			else
				echo "Invalid hash value"
				exit 1
			fi
		else
			echo "$OPTARG already exists in the blacklist"
			exit 1
		fi
		;;
	\?)
		usage
		exit 1
		;;
	:)
		echo "Invalid number of arguments for option $OPTARG. $OPTARG requires $NUMARGS argument(s)."
		exit 1
		;;
	esac
done
shift "$OPTIND"

# Get variables from artemis.conf
EMAIL=$(grep EMAIL "$CONF" | cut -d'=' -f2)
DIR=$(grep SDIR "$CONF" | cut -d'=' -f2)
IDIR=$(grep IDIR "$CONF" | cut -d'=' -f2)
MAXPROC=$(grep MAXPROC "$CONF" | cut -d'=' -f2)
MAXHASH=$(grep MAXHASH "$CONF" | cut -d'=' -f2)
VTAPI=$(grep VTAPI "$CONF" | cut -d'=' -f2)

# Check that required variables contain values
if [[ -z "$DIR" ]] || [[ -z "$MAXPROC" ]] || [[ -z "$MAXHASH" ]] || [[ -z "$EMAIL" ]]; then
	echo Artemis: Invalid configuration detected! Check that the conf file has been properly configured.
	exit 1
fi

# Create the infected file directory if it does not exist
if [[ -n $IDIR ]]; then
	if ! [[ -d $IDIR ]]; then
		mkdir -pm 600 "$IDIR"
	fi
fi

# Create a temporary file directory if it does not exist
if ! [[ -d /tmp/artemis/ ]]; then
	mkdir -m 660 /tmp/artemis/
fi

# Mount the cache directory
if ! [[ -d /opt/artemis/cache/ ]]; then
	mkdir -p /opt/artemis/cache/
fi
if  ! mount | grep -q /opt/artemis/cache ; then
	mount -t tmpfs -o size=2m tmpfs /opt/artemis/cache/
	chmod 600 /opt/artemis/cache/
fi

# Create a woker pid directory in the cache
mkdir /opt/artemis/cache/workers/

# Start the Orion scanner
/usr/bin/orion &

inotifywait -q -m -e create,moved_to --format '%w%f' "$DIR" | while read FILE
do
	prescan "$FILE" &
done

# Shutdown
pkill -9 orion
pkill -9 clamdscan

# Cleanup
umount /opt/artemis/cache/
rm -rf /opt/artemis/cache/
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Logs WHERE Result IS NULL;"
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "DELETE FROM Cache WHERE Result IS NULL;"
mysql --defaults-file=/etc/mysql/debian.cnf -D artemis -e "TRUNCATE TABLE Queue;"
if [[ -d /tmp/artemis/ ]] && ! [[ -d /tmp/artemis/logRepair ]]; then
	rm -rf /tmp/artemis/
fi

pkill -x -9 artemis
exit
